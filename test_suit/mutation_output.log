[*] Start mutation process:
   - targets: isTriangle
   - tests: test_mutationAdequate
[*] 16 tests passed:
   - test_mutationAdequate [0.00040 s]
[*] Start mutants generation and execution:
   - [#   1] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a - b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00827 s] survived
   - [#   2] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a - c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00781 s] survived
   - [#   3] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b - c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00827 s] survived
   - [#   4] AOR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a - b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00782 s] survived
   - [#   5] AOR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a - c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00771 s] survived
   - [#   6] AOR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b - c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00820 s] survived
   - [#   7] ASR isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian -= 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.00781 s] survived
   - [#   8] ASR isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian -= 2
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.00807 s] survived
   - [#   9] ASR isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian -= 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00812 s] survived
   - [#  10] COI isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if not ((a <= 0 or b <= 0 or c <= 0)):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00798 s] survived
   - [#  11] COI isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if not (a == b):
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.00774 s] survived
   - [#  12] COI isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if not (a == c):
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.00809 s] survived
   - [#  13] COI isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if not (b == c):
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.00812 s] survived
   - [#  14] COI isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if not (trian == 0):
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.00775 s] survived
   - [#  15] COI isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if not ((a + b <= c or a + c <= b or b + c <= a)):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00815 s] survived
   - [#  16] COI isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if not (trian > 3):
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00821 s] survived
   - [#  17] COI isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if not ((trian == 1 and a + b > c)):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00817 s] survived
   - [#  18] COI isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif not ((trian == 2 and a + c > b)):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00822 s] survived
   - [#  19] COI isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif not ((trian == 3 and b + c > a)):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00776 s] survived
   - [#  20] CRP isTriangle: 
--------------------------------------------------------------------------------
   6:     An implementation that classifies triangles.
   7:     '''
   8:     
   9:     class Type(Enum):
- 10:         INVALID = 0
+ 10:         INVALID = 1
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
--------------------------------------------------------------------------------
[0.00932 s] killed by test14 (test_mutationAdequate.MutationAdequateTest)
   - [#  21] CRP isTriangle: 
--------------------------------------------------------------------------------
   7:     '''
   8:     
   9:     class Type(Enum):
  10:         INVALID = 0
- 11:         SCALENE = 1
+ 11:         SCALENE = 2
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
  15:     @staticmethod
--------------------------------------------------------------------------------
[0.00880 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  22] CRP isTriangle: 
--------------------------------------------------------------------------------
   8:     
   9:     class Type(Enum):
  10:         INVALID = 0
  11:         SCALENE = 1
- 12:         EQUILATERAL = 2
+ 12:         EQUILATERAL = 3
  13:         ISOSCELES = 3
  14:     
  15:     @staticmethod
  16:     def classify(a, b, c):
--------------------------------------------------------------------------------
[0.00859 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  23] CRP isTriangle: 
--------------------------------------------------------------------------------
   9:     class Type(Enum):
  10:         INVALID = 0
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
- 13:         ISOSCELES = 3
+ 13:         ISOSCELES = 4
  14:     
  15:     @staticmethod
  16:     def classify(a, b, c):
  17:         '''
--------------------------------------------------------------------------------
[0.00910 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  24] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 1 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00794 s] survived
   - [#  25] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 1 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00772 s] survived
   - [#  26] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c <= 1):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00774 s] survived
   - [#  27] CRP isTriangle: 
--------------------------------------------------------------------------------
  20:         '''
  21:         if (a <= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
- 24:         trian = 0
+ 24:         trian = 1
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
--------------------------------------------------------------------------------
[0.00816 s] survived
   - [#  28] CRP isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian += 2
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.00803 s] survived
   - [#  29] CRP isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian += 3
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.00771 s] survived
   - [#  30] CRP isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian += 4
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00791 s] survived
   - [#  31] CRP isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian == 1:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.00820 s] survived
   - [#  32] CRP isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian > 4:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00777 s] survived
   - [#  33] CRP isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 2 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00779 s] survived
   - [#  34] CRP isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 3 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00888 s] survived
   - [#  35] CRP isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 4 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00783 s] survived
   - [#  36] DDL isTriangle: 
--------------------------------------------------------------------------------
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
- 15:     @staticmethod
- 16:     def classify(a, b, c):
+ 15:     def classify(\
+ 16:         a, b, c):
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
--------------------------------------------------------------------------------
[0.00826 s] survived
   - [#  37] LCR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 and b <= 0 and c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00812 s] survived
   - [#  38] LCR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c and a + c <= b and b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00788 s] survived
   - [#  39] LCR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 or a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00791 s] survived
   - [#  40] LCR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 or a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00782 s] survived
   - [#  41] LCR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 or b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00826 s] survived
   - [#  42] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a >= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00789 s] survived
   - [#  43] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a < 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00812 s] survived
   - [#  44] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b >= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00814 s] survived
   - [#  45] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b < 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00780 s] survived
   - [#  46] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c >= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00826 s] survived
   - [#  47] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c < 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00807 s] survived
   - [#  48] ROR isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if a != b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.00809 s] survived
   - [#  49] ROR isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if a != c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.00820 s] survived
   - [#  50] ROR isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if b != c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.00824 s] survived
   - [#  51] ROR isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian != 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.00824 s] survived
   - [#  52] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b >= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00813 s] survived
   - [#  53] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b < c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00845 s] survived
   - [#  54] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c >= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00843 s] survived
   - [#  55] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c < b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00836 s] survived
   - [#  56] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c >= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00848 s] survived
   - [#  57] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c < a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00828 s] survived
   - [#  58] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian < 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00817 s] survived
   - [#  59] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian >= 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00847 s] survived
   - [#  60] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian != 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00824 s] survived
   - [#  61] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b < c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00809 s] survived
   - [#  62] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b >= c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00864 s] survived
   - [#  63] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian != 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00853 s] survived
   - [#  64] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c < b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00804 s] survived
   - [#  65] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c >= b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00847 s] survived
   - [#  66] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian != 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00855 s] survived
   - [#  67] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c < a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00856 s] survived
   - [#  68] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c >= a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00847 s] survived
[*] Mutation score [1.59712 s]: 5.9%
   - all: 68
   - killed: 4 (5.9%)
   - survived: 64 (94.1%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
[*] Start mutation process:
   - targets: isTriangle
   - tests: test_mutationAdequate
[*] 16 tests passed:
   - test_mutationAdequate [0.00043 s]
[*] Start mutants generation and execution:
   - [#   1] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a - b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00846 s] survived
   - [#   2] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a - c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00870 s] survived
   - [#   3] AOR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b - c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00813 s] survived
   - [#   4] AOR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a - b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00818 s] survived
   - [#   5] AOR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a - c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00812 s] survived
   - [#   6] AOR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b - c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00834 s] survived
   - [#   7] ASR isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian -= 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.00858 s] survived
   - [#   8] ASR isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian -= 2
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.00804 s] survived
   - [#   9] ASR isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian -= 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00827 s] survived
   - [#  10] COI isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if not ((a <= 0 or b <= 0 or c <= 0)):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00830 s] survived
   - [#  11] COI isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if not (a == b):
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.00852 s] survived
   - [#  12] COI isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if not (a == c):
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.00851 s] survived
   - [#  13] COI isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if not (b == c):
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.00808 s] survived
   - [#  14] COI isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if not (trian == 0):
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.00852 s] survived
   - [#  15] COI isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if not ((a + b <= c or a + c <= b or b + c <= a)):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00858 s] survived
   - [#  16] COI isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if not (trian > 3):
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00844 s] survived
   - [#  17] COI isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if not ((trian == 1 and a + b > c)):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00819 s] survived
   - [#  18] COI isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif not ((trian == 2 and a + c > b)):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00822 s] survived
   - [#  19] COI isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif not ((trian == 3 and b + c > a)):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00861 s] survived
   - [#  20] CRP isTriangle: 
--------------------------------------------------------------------------------
   6:     An implementation that classifies triangles.
   7:     '''
   8:     
   9:     class Type(Enum):
- 10:         INVALID = 0
+ 10:         INVALID = 1
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
--------------------------------------------------------------------------------
[0.00966 s] killed by test14 (test_mutationAdequate.MutationAdequateTest)
   - [#  21] CRP isTriangle: 
--------------------------------------------------------------------------------
   7:     '''
   8:     
   9:     class Type(Enum):
  10:         INVALID = 0
- 11:         SCALENE = 1
+ 11:         SCALENE = 2
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
  15:     @staticmethod
--------------------------------------------------------------------------------
[0.00927 s] killed by test10 (test_mutationAdequate.MutationAdequateTest)
   - [#  22] CRP isTriangle: 
--------------------------------------------------------------------------------
   8:     
   9:     class Type(Enum):
  10:         INVALID = 0
  11:         SCALENE = 1
- 12:         EQUILATERAL = 2
+ 12:         EQUILATERAL = 3
  13:         ISOSCELES = 3
  14:     
  15:     @staticmethod
  16:     def classify(a, b, c):
--------------------------------------------------------------------------------
[0.00940 s] killed by test1 (test_mutationAdequate.MutationAdequateTest)
   - [#  23] CRP isTriangle: 
--------------------------------------------------------------------------------
   9:     class Type(Enum):
  10:         INVALID = 0
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
- 13:         ISOSCELES = 3
+ 13:         ISOSCELES = 4
  14:     
  15:     @staticmethod
  16:     def classify(a, b, c):
  17:         '''
--------------------------------------------------------------------------------
[0.00957 s] killed by test11 (test_mutationAdequate.MutationAdequateTest)
   - [#  24] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 1 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00822 s] survived
   - [#  25] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 1 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00858 s] survived
   - [#  26] CRP isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c <= 1):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00875 s] survived
   - [#  27] CRP isTriangle: 
--------------------------------------------------------------------------------
  20:         '''
  21:         if (a <= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
- 24:         trian = 0
+ 24:         trian = 1
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
--------------------------------------------------------------------------------
[0.00831 s] survived
   - [#  28] CRP isTriangle: 
--------------------------------------------------------------------------------
  23:         
  24:         trian = 0
  25:         
  26:         if a == b:
- 27:             trian += 1
+ 27:             trian += 2
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
--------------------------------------------------------------------------------
[0.00883 s] survived
   - [#  29] CRP isTriangle: 
--------------------------------------------------------------------------------
  25:         
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
- 29:             trian += 2
+ 29:             trian += 3
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
--------------------------------------------------------------------------------
[0.00891 s] survived
   - [#  30] CRP isTriangle: 
--------------------------------------------------------------------------------
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
- 31:             trian += 3
+ 31:             trian += 4
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00855 s] survived
   - [#  31] CRP isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian == 1:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.00908 s] survived
   - [#  32] CRP isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian > 4:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00817 s] survived
   - [#  33] CRP isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 2 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00826 s] survived
   - [#  34] CRP isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 3 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00864 s] survived
   - [#  35] CRP isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 4 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00825 s] survived
   - [#  36] DDL isTriangle: 
--------------------------------------------------------------------------------
  11:         SCALENE = 1
  12:         EQUILATERAL = 2
  13:         ISOSCELES = 3
  14:     
- 15:     @staticmethod
- 16:     def classify(a, b, c):
+ 15:     def classify(\
+ 16:         a, b, c):
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
--------------------------------------------------------------------------------
[0.00825 s] survived
   - [#  37] LCR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 and b <= 0 and c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00852 s] survived
   - [#  38] LCR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c and a + c <= b and b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00830 s] survived
   - [#  39] LCR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 or a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00866 s] survived
   - [#  40] LCR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 or a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00875 s] survived
   - [#  41] LCR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 or b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00869 s] survived
   - [#  42] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a >= 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00877 s] survived
   - [#  43] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a < 0 or b <= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01788 s] survived
   - [#  44] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b >= 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01749 s] survived
   - [#  45] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b < 0 or c <= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00973 s] survived
   - [#  46] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c >= 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.01345 s] survived
   - [#  47] ROR isTriangle: 
--------------------------------------------------------------------------------
  17:         '''
  18:         This static method does the actual classification of a triangle, given the lengths
  19:         of its three sides.
  20:         '''
- 21:         if (a <= 0 or b <= 0 or c <= 0):
+ 21:         if (a <= 0 or b <= 0 or c < 0):
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
--------------------------------------------------------------------------------
[0.00935 s] survived
   - [#  48] ROR isTriangle: 
--------------------------------------------------------------------------------
  22:             return Triangle.Type.INVALID
  23:         
  24:         trian = 0
  25:         
- 26:         if a == b:
+ 26:         if a != b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
  30:         if b == c:
--------------------------------------------------------------------------------
[0.01360 s] survived
   - [#  49] ROR isTriangle: 
--------------------------------------------------------------------------------
  24:         trian = 0
  25:         
  26:         if a == b:
  27:             trian += 1
- 28:         if a == c:
+ 28:         if a != c:
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
--------------------------------------------------------------------------------
[0.00881 s] survived
   - [#  50] ROR isTriangle: 
--------------------------------------------------------------------------------
  26:         if a == b:
  27:             trian += 1
  28:         if a == c:
  29:             trian += 2
- 30:         if b == c:
+ 30:         if b != c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
--------------------------------------------------------------------------------
[0.01547 s] survived
   - [#  51] ROR isTriangle: 
--------------------------------------------------------------------------------
  29:             trian += 2
  30:         if b == c:
  31:             trian += 3
  32:         
- 33:         if trian == 0:
+ 33:         if trian != 0:
  34:             if (a + b <= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
--------------------------------------------------------------------------------
[0.00929 s] survived
   - [#  52] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b >= c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.01055 s] survived
   - [#  53] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b < c or a + c <= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00851 s] survived
   - [#  54] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c >= b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00905 s] survived
   - [#  55] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c < b or b + c <= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00883 s] survived
   - [#  56] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c >= a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00838 s] survived
   - [#  57] ROR isTriangle: 
--------------------------------------------------------------------------------
  30:         if b == c:
  31:             trian += 3
  32:         
  33:         if trian == 0:
- 34:             if (a + b <= c or a + c <= b or b + c <= a):
+ 34:             if (a + b <= c or a + c <= b or b + c < a):
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
--------------------------------------------------------------------------------
[0.00936 s] survived
   - [#  58] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian < 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00879 s] survived
   - [#  59] ROR isTriangle: 
--------------------------------------------------------------------------------
  35:                 return Triangle.Type.INVALID
  36:             else:
  37:                 return Triangle.Type.SCALENE
  38:         
- 39:         if trian > 3:
+ 39:         if trian >= 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
--------------------------------------------------------------------------------
[0.00847 s] survived
   - [#  60] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian != 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00819 s] survived
   - [#  61] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b < c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00893 s] survived
   - [#  62] ROR isTriangle: 
--------------------------------------------------------------------------------
  38:         
  39:         if trian > 3:
  40:             return Triangle.Type.EQUILATERAL
  41:         
- 42:         if (trian == 1 and a + b > c):
+ 42:         if (trian == 1 and a + b >= c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
--------------------------------------------------------------------------------
[0.00857 s] survived
   - [#  63] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian != 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00843 s] survived
   - [#  64] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c < b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00875 s] survived
   - [#  65] ROR isTriangle: 
--------------------------------------------------------------------------------
  40:             return Triangle.Type.EQUILATERAL
  41:         
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
- 44:         elif (trian == 2 and a + c > b):
+ 44:         elif (trian == 2 and a + c >= b):
  45:             return Triangle.Type.ISOSCELES
  46:         elif (trian == 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
--------------------------------------------------------------------------------
[0.00829 s] survived
   - [#  66] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian != 3 and b + c > a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00835 s] survived
   - [#  67] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c < a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00880 s] survived
   - [#  68] ROR isTriangle: 
--------------------------------------------------------------------------------
  42:         if (trian == 1 and a + b > c):
  43:             return Triangle.Type.ISOSCELES
  44:         elif (trian == 2 and a + c > b):
  45:             return Triangle.Type.ISOSCELES
- 46:         elif (trian == 3 and b + c > a):
+ 46:         elif (trian == 3 and b + c >= a):
  47:             return Triangle.Type.ISOSCELES
  48:         
  49:         return Triangle.Type.INVALID
--------------------------------------------------------------------------------
[0.00824 s] survived
[*] Mutation score [2.10932 s]: 5.9%
   - all: 68
   - killed: 4 (5.9%)
   - survived: 64 (94.1%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
